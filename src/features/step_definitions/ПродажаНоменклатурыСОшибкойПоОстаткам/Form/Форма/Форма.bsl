//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьОткрытоеОкноСОшибкойСТекстом(Парам01)","ЕстьОткрытоеОкноСОшибкойСТекстом","Когда Есть открытое окно с ошибкой с текстом ""Не хватает товара""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Есть открытое окно с ошибкой с текстом "Не хватает товара"
//@ЕстьОткрытоеОкноСОшибкойСТекстом(Парам01)
Процедура ЕстьОткрытоеОкноСОшибкойСТекстом(Парам01) Экспорт
	
	ТекстИсключения = "Нет окна с ошибкой: " + Строка(Парам01);
	
	АктивноеОкноСВыводомОшибки = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "1С:Предприятие", , 15);
	
	Если АктивноеОкноСВыводомОшибки = Неопределено Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ФормаАктивногоОкнаСВыводомОшибки = АктивноеОкноСВыводомОшибки.НайтиОбъект(Тип("ТестируемаяФорма"), "1С:Предприятие", , 15);
	
	Если ФормаАктивногоОкнаСВыводомОшибки = Неопределено Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПолеФормыАктивногоОкнаСВыводомОшибки = ФормаАктивногоОкнаСВыводомОшибки.НайтиОбъект(Тип("ТестируемоеПолеФормы"));
	
	Если ПолеФормыАктивногоОкнаСВыводомОшибки = Неопределено Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Сообщение = ПолеФормыАктивногоОкнаСВыводомОшибки.ТекстЗаголовка;
	
	Если Найти(НРег(Сообщение),НРег(Парам01)) = 0 Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

//окончание текста модуля